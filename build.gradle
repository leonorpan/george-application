/*
 Useful commands for this project:

*/

version = '0.1.0'
group = 'no.andante.george'


// https://docs.gradle.org/current/userguide/java_plugin.html
apply plugin: 'java'
sourceCompatibility = '1.8'

apply plugin: 'idea'

// https://github.com/cosmin/IClojure

buildscript {
    repositories {
        maven { url 'http://clojars.org/repo' }
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "clojuresque:clojuresque:1.7.0"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
  //      classpath 'com.offbytwo.iclojure:iclojure:1.2.0'
        classpath 'jline:jline:0.9.94'
        classpath 'org.clojure:tools.reader:1.0.0-alpha1'

    }
}

apply plugin: 'clojure'
clojure {
    warnOnReflection = true
    aotCompile = false
}

apply plugin: 'application'
// https://docs.gradle.org/current/userguide/application_plugin.html

mainClassName = 'example.App'


sourceSets {
    main {
        clojure { srcDirs = ['src/main/clojure'] }
    }
    test {
        clojure { srcDirs = ['src/test/clojure'] }
    }
}

repositories {
    maven { url 'http://clojars.org/repo' }
    mavenCentral()
    jcenter()
    //  flatDir dirs: project.file("lib/runtime")  // what does this do?
}

dependencies {
    compile 'org.clojure:clojure:1.8.0-RC3'
    compile 'jline:jline:0.9.94'
    compile 'org.fxmisc.richtext:richtextfx:0.6.10'
    compile 'org.clojure:tools.reader:1.0.0-alpha1'
    compile 'org.apache.directory.studio:org.apache.commons.io:2.4'
}



jar {
    manifest {
        attributes  'Implementation-Title': 'George Client - jvm',
                    'Implementation-Version': version,
                    'Main-Class': mainClassName
    }
}


apply plugin: 'com.github.johnrengelman.shadow'
//https://github.com/johnrengelman/shadow

shadowJar {
    exclude('META-INF/maven/**')
}



run {
    args 'd e f'
}


/* TASKS */

// DSL: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html#org.gradle.api.tasks.JavaExec:args
// JavaDoc: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html


task example(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'example.App'
  args 'g h i'
}



task cp << {
    def isWindows = System.properties['os.name'].toLowerCase().contains('windows')
    //println "  isWindow: "+isWindows
    def cp_file =  new File(  isWindows ? 'build\\cp\\classpath_bat' : 'build/cp/classpath_sh' )
    println " cp_file: " + cp_file
    def sep = isWindows ? ";" : ":"
    //println "  sep: " + sep

    cp_file.parentFile.mkdirs()

    cp_file.withWriter { w ->
    for (p in sourceSets.main.runtimeClasspath) {
            println "  " + p
            w << p << sep
        }
    }

}
